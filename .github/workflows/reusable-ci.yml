name: service-ci

on:
  workflow_call:
    inputs:
      service:
        required: true
        type: string          # e.g., frontend, backend
      context:
        required: true
        type: string          # folder path, e.g., frontend
      dockerfile:
        required: false
        type: string
        default: Dockerfile
      image_name:
        required: true
        type: string          # repo name in ACR
      push:
        required: true
        type: boolean         # true only when you want to push
      test_command:
        required: false
        type: string
        default: ""
      acr_name:
        required: true
        type: string          # SHORT ACR name, e.g., week09acr91990
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true

jobs:
  build_test_push:
    runs-on: ubuntu-latest
    permissions:
      id-token: write     # for OIDC
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- Language setup & tests ----------
      - name: Setup Node
        if: ${{ hashFiles(format('{0}/package.json', inputs.context)) != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: ${{ inputs.context }}/package-lock.json

      - name: Install & Test (Node)
        if: ${{ hashFiles(format('{0}/package.json', inputs.context)) != '' }}
        working-directory: ${{ inputs.context }}
        run: |
          npm ci
          npm test --if-present

      - name: Setup Python
        if: ${{ hashFiles(format('{0}/requirements.txt', inputs.context)) != '' }}
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install & Test (Python)
        if: ${{ hashFiles(format('{0}/requirements.txt', inputs.context)) != '' }}
        working-directory: ${{ inputs.context }}
        run: |
          python -m pip install -r requirements.txt
          pytest -q || true

      - name: Custom tests
        if: ${{ inputs.test_command != '' }}
        working-directory: ${{ inputs.context }}
        run: ${{ inputs.test_command }}

      # ---------- Build & (optionally) push ----------
      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Log in to ACR
        run: az acr login --name ${{ inputs.acr_name }}

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image (push = ${{ inputs.push }})
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.context }}/${{ inputs.dockerfile }}
          push: ${{ inputs.push }}
          tags: ${{ inputs.acr_name }}.azurecr.io/${{ inputs.image_name }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Show image tag
        run: echo "IMAGE=${{ inputs.acr_name }}.azurecr.io/${{ inputs.image_name }}:${{ github.sha }}"
