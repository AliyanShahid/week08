name: CD - Deploy Frontend to AKS

on:
  workflow_dispatch:
    inputs:
      product_api_ip:
        description: 'External IP of Product Service'
        required: true
        default: 'http://<ip_address>:8000'
      order_api_ip:
        description: 'External IP of Order Service (e.g., http://Y.Y.Y.Y:8001)'
        required: true
        default: 'http://<ip_address>:8001'
      aks_cluster_name:
        description: 'Name of the AKS Cluster to deploy to'
        required: true
        default: '<aks_name>'
      aks_resource_group:
        description: 'Resource Group of the AKS Cluster'
        required: true
        default: '<resource_group_name>'

jobs:
  deploy_frontend:
    runs-on: ubuntu-latest
    environment: Production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # âœ… Use the secret that exists (registry *name*, not login server)
      - name: Login to Azure Container Registry
        run: az acr login --name ${{ secrets.AZURE_ACR_NAME }}

      # Replace placeholders in frontend/main.js
      - name: Inject Backend IPs into Frontend main.js
        run: |
          sed -i "s|_PRODUCT_API_URL_|${{ inputs.product_api_ip }}|g" frontend/main.js
          sed -i "s|_ORDER_API_URL_|${{ inputs.order_api_ip }}|g" frontend/main.js
          echo "===== main.js after substitution ====="
          cat frontend/main.js

      # Build & push to your ACR login server
      - name: Build and Push Frontend Image
        run: |
          docker build -t ${{ secrets.AZURE_ACR_LOGIN_SERVER }}/frontend:latest ./frontend/
          docker push ${{ secrets.AZURE_ACR_LOGIN_SERVER }}/frontend:latest

      # Get kubectl context for the target AKS
      - name: Set Kubernetes context (get AKS credentials)
        run: |
          az aks get-credentials \
            --resource-group "${{ inputs.aks_resource_group }}" \
            --name "${{ inputs.aks_cluster_name }}" --overwrite-existing

      # Deploy frontend (make sure k8s/frontend.yaml uses your ACR image & pull secret)
      - name: Deploy Frontend to AKS
        run: |
          kubectl apply -f k8s/frontend.yaml -n default
          kubectl rollout status deployment/frontend -n default

      - name: Logout
        run: az logout
